// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IoTClient is the client API for IoT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoTClient interface {
	// Sends water soil level
	SendWaterSoilLevel(ctx context.Context, in *WaterSoilMetrics, opts ...grpc.CallOption) (*MetricsReply, error)
}

type ioTClient struct {
	cc grpc.ClientConnInterface
}

func NewIoTClient(cc grpc.ClientConnInterface) IoTClient {
	return &ioTClient{cc}
}

func (c *ioTClient) SendWaterSoilLevel(ctx context.Context, in *WaterSoilMetrics, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/messages.IoT/SendWaterSoilLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IoTServer is the server API for IoT service.
// All implementations must embed UnimplementedIoTServer
// for forward compatibility
type IoTServer interface {
	// Sends water soil level
	SendWaterSoilLevel(context.Context, *WaterSoilMetrics) (*MetricsReply, error)
	mustEmbedUnimplementedIoTServer()
}

// UnimplementedIoTServer must be embedded to have forward compatible implementations.
type UnimplementedIoTServer struct {
}

func (UnimplementedIoTServer) SendWaterSoilLevel(context.Context, *WaterSoilMetrics) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWaterSoilLevel not implemented")
}
func (UnimplementedIoTServer) mustEmbedUnimplementedIoTServer() {}

// UnsafeIoTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoTServer will
// result in compilation errors.
type UnsafeIoTServer interface {
	mustEmbedUnimplementedIoTServer()
}

func RegisterIoTServer(s grpc.ServiceRegistrar, srv IoTServer) {
	s.RegisterService(&IoT_ServiceDesc, srv)
}

func _IoT_SendWaterSoilLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterSoilMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServer).SendWaterSoilLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.IoT/SendWaterSoilLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServer).SendWaterSoilLevel(ctx, req.(*WaterSoilMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

// IoT_ServiceDesc is the grpc.ServiceDesc for IoT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IoT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.IoT",
	HandlerType: (*IoTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWaterSoilLevel",
			Handler:    _IoT_SendWaterSoilLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/messages.proto",
}
